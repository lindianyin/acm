#include <iostream>
#include <string>
#include <vector>
#include <deque>
#include <set>
#include <algorithm>
#include <limits>
#include "dbg-macro/dbg.h"
using namespace std;
class Solution{
public:
    int numIslands(vector<vector<char>>& grid) {
		int cnt = 0;
		for(int i = 0;i<grid.size();i++){
			for(int j = 0;j<grid[i].size();j++){
				if(grid[i][j] == '1'){
					cnt++;
					grid[i][j] = '0';
					deque<pair<int,int>> que;
					que.push_back({i,j});
					while(!que.empty()){
						pair<int,int> cur = que.front();
						dbg(cur);
						int ci = cur.first;
						int cj = cur.second;
						que.pop_front();
						if(ci-1>=0 && grid[ci-1][cj] == '1'){
							que.push_back({ci-1,cj});
							grid[ci-1][cj] = '0';
						}
						if(cj+1<grid[i].size() && grid[ci][cj+1] == '1'){
							que.push_back({ci,cj+1});
							grid[ci][cj+1] = '0';
						}
						if(ci+1 < grid.size() && grid[ci+1][cj] == '1'){
							que.push_back({ci+1,cj});
							grid[ci+1][cj] = '0';
						}
						if(cj-1 >=0 && grid[ci][cj-1] == '1'){
							que.push_back({ci,cj-1});
							grid[ci][cj-1] = '0';
						}
					}
				}
			}
		}
		return cnt;
    }	
};

int main(int argc,char* argv[]){
	Solution s;
vector<vector<char>> 
grid1 = 
{
  {'1','1','1','1','0'},
  {'1','1','0','1','0'},
  {'1','1','0','0','0'},
  {'0','0','0','0','0'}
};
vector<vector<char>> 
grid2 = 
{
  {'1','1','0','0','0'},
  {'1','1','0','0','0'},
  {'0','0','1','0','0'},
  {'0','0','0','1','1'}
};
vector<vector<char>> 
grid3 = 
{};
vector<vector<char>> 
grid4=
{{'1'}};
vector<vector<char>> 
grid5=
{{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
	int cnt = s.numIslands(grid5);
	dbg(cnt);
	return 0;
}
